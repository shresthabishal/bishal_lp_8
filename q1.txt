/** 
 * Given two non-negative integers num1 and num2 represented as strings,
 * return the product of num1 and num2
 * Note: 
 * The length of both num1 and num2 is < 110
 * Both num1 and num2 contains only digits 0-9.
 * Both num1 and num2 does not contain any leading zero.
 * You must not use any built-in BigInteger library or convert the inputs to integer
 * directly.**/

public class LargeProduct {

	private String product;
	
	public LargeProduct(String number1, String number2){
		product = filterZero(charMultiply(filterZero(number1), filterZero(number2)));
	}
	
	public String getProduct(){
		return product;
	}
	
	
	
	private String filterZero(String str){ 	//filter zeros out of numbers containing zero in front
		while(str.startsWith("0")){
			str = str.substring(1);
//			System.out.println(str);
		}
		if(str.equals("")) return "0";
		return str;
	}
	
	
	private String charMultiply(String n1, String n2){
		String currrent = "";
		String product = "";
		
		int j = 0;
		for(int i = n2.length() - 1; i >= 0; i--){
			currrent = charMultiply(n1, n2.charAt(i));
//			System.out.println("added zeros: " + current + zeroAdder(j));
			product = charAddition(product, currrent + zeroAdder(j++));
//			System.out.println(product);
		}
		return product;
	}
	
	/*
	 * To increase place value of any number with multiple of i
	 */
	private String zeroAdder(int i){
		String zeros = "";
		for(; i > 0; i--){
			zeros += "0";
		}
		return zeros;
	}
	
	/*
	 * Multiply and return product of string of numbers with a single character number
	 * i.e., 1234 * 5
	 */
	private String charMultiply(String n1, char n2){
		String current = "";
		char carry = '0';
		String product = "";
		for(int i = n1.length() - 1; i >= 0; i--){
			current = charAddition(String.valueOf(charToInt(n1.charAt(i)) * charToInt(n2)), carry);
			product = current.charAt(current.length() - 1) + product;
			if(current.length() > 1){
				carry = current.charAt(0);
			}else carry = '0';
		}
		if(carry > '0') product = carry + product;
		return product;
	}
	
	/*
	 * Addition of string of numbers with another string of numbers
	 * i.e., 1234 + 5678
	 */
	private String charAddition(String num1, String num2){
		String current = "";
		if(num1.length() < num2.length()){  	//Make sure second number is always less than first before addition
			String temp = num1;
			num1 = num2;
			num2 = temp;
		}
		for(int i = 0; i < num2.length(); i++){
//			System.out.println(num1.substring(0, num1.length()  - i) + " " + num2.charAt(num2.length() - 1 - i));
			current = charAddition(num1.substring(0, num1.length() - i), num2.charAt(num2.length() - 1 - i));
//			System.out.println("current : " + current);
//			System.out.println("new: " + num1.substring(num1.length() - 1 - i, num1.length() - 1));
			num1 = current + num1.substring(num1.length() - i, num1.length() );
//			System.out.println("finalOp charAddition(str, str): " + num1);
		}
		return num1;
	}
	
	/*
	 * Addition of a string of number with a single number 
	 * i.e., 12345 + 7
	 */
	private String charAddition(String num1, char num2){
		String finalOp = "";
		String currentOp = "";
		boolean exit = false;
		int carry = charToInt(num2);
		int i = 1;
		while(!exit){
			currentOp = String.valueOf(charToInt(num1.charAt(num1.length() - i))
					+ carry);
			finalOp = currentOp.charAt(currentOp.length() - 1) + finalOp;
			if(currentOp.length() != 1){
				carry = 1;	//carry is always 1 in case of single digit addition
				if(i == num1.length()){
					finalOp = "1" + finalOp;
					exit = true;
				}else{
					i++;
				}
			}else exit = true;
		}
		if(i < num1.length()){
//			System.out.println("here" + num1.substring(0, num1.length() - i));
			finalOp = num1.substring(0, num1.length() - i) + finalOp;	
		}
//		System.out.println(finalOp);
		return finalOp;
	}
	
	/*
	 * convert single character into integer
	 */
	private int charToInt(char ch){
		int num = 0;
		switch(ch){
			case '0':
				num = 0;
				break;
			case '1':
				num = 1;
				break;
			case '2':
				num = 2;
				break;
			case '3':
				num = 3;
				break;
			case '4':
				num = 4;
				break;
			case '5':
				num = 5;
				break;
			case '6':
				num = 6;
				break;
			case '7':
				num = 7;
				break;
			case '8':
				num = 8;
				break;
			case '9':
				num = 9;
				break;
			default:
//				return new Exception
		}
		return num;
	}
}